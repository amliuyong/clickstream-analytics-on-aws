import { CfnResource, IAspect } from 'aws-cdk-lib';
import { IConstruct } from 'constructs';

const CfnNagList = [
  {
    paths: [
      'IngestionServer/clickstream-ingestion-service-ecs-asg/InstanceRole/DefaultPolicy/Resource',
      'IngestionServer/clickstream-ingestion-service-ecs-asg/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource',
      'IngestionServer/clickstream-ingestion-service-ecs-task-def/ExecutionRole/DefaultPolicy/Resource',
    ],
    rules_to_suppress: [
      {
        id: 'W12',
        reason: 'Policy is generated by CDK, * resource for read only access',
      },
    ],
  },

  {
    paths: [
      'IngestionServer/clickstream-ingestion-service-ecs-asg/DrainECSHook/Function/Resource',
    ],
    rules_to_suppress: [
      {
        id: 'W89',
        reason:
          'Lambda functions only for deployment/cloudformation custom resources, no need to be deployed in VPC',
      },

      {
        id: 'W92',
        reason:
          'Lambda functions only for deployment/cloudformation custom resources, no need to set ReservedConcurrentExecutions',
      },
    ],
  },

  {
    paths: [
      'IngestionServer/clickstream-ingestion-service-ecs-asg/LifecycleHookDrainHook/Topic/Resource',
    ],
    rules_to_suppress: [
      {
        id: 'W47',
        reason:
          'SNS Topic is managed outside of this stack, no need to specify KmsMasterKeyId property',
      },
    ],
  },
];

export class AddCfnNag implements IAspect {
  visit(node: IConstruct): void {
    if (node instanceof CfnResource) {
      for (const nagConfig of CfnNagList) {
        for (const path of nagConfig.paths) {
          if (node.node.path.endsWith(path)) {
            (node as CfnResource).addMetadata('cfn_nag', {
              rules_to_suppress: nagConfig.rules_to_suppress,
            });
          }
        }
      }
    }
  }
}
