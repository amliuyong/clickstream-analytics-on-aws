/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Stack } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import {
  addCfnNagForLogRetention,
  addCfnNagForCustomResourceProvider,
  addCfnNagToStack,
  addCfnNagForCfnResource,
} from './common/cfn-nag';
import { SolutionInfo } from './common/solution-info';
import { createStackParametersQuickSight } from './reporting/parameter';
import { createQuicksightCustomResource } from './reporting/quicksight-custom-resource';

export class DataReportingQuickSightStack extends Stack {

  private paramGroups: any[] = [];
  private paramLabels: any = {};

  constructor(scope: Construct, id: string, props: {}) {
    super(scope, id, props);

    const featureName = 'Reporting - QuickSight';
    this.templateOptions.description = `(${SolutionInfo.SOLUTION_ID}) ${SolutionInfo.SOLUTION_NAME} - ${featureName} (Version ${SolutionInfo.SOLUTION_VERSION})`;

    const stackParames = createStackParametersQuickSight(this, this.paramGroups, this.paramLabels);
    createQuicksightCustomResource(this, {
      quickSightProps: {
        userName: stackParames.quickSightUserParam.valueAsString,
        namespace: stackParames.quickSightNamespaceParam.valueAsString,
        vpcConnectionArn: stackParames.quickSightVpcConnectionParam.valueAsString,
        principalArn: stackParames.quickSightPrincipalParam.valueAsString,
        templateArn: stackParames.quickSightTemplateArnParam.valueAsString,
      },
      redshiftProps: {
        host: stackParames.redshiftEndpointParam.valueAsString,
        port: stackParames.redshiftPortParam.valueAsNumber,
        databaseName: stackParames.redshiftDBParam.valueAsString,
        databaseSchemaNames: stackParames.redShiftDBSchemaParam.valueAsString,
        ssmParameterName: stackParames.redshiftParameterKeyParam.valueAsString,
      },
    });

    this.templateOptions.metadata = {
      'AWS::CloudFormation::Interface': {
        ParameterGroups: this.paramGroups,
        ParameterLabels: this.paramLabels,
      },
    };

    addCfnNag(this);
  }

}

function addCfnNag(stack: Stack) {

  addCfnNagForLogRetention(stack);
  addCfnNagForCustomResourceProvider(stack, 'CDK built-in provider for QuicksightDatasourceCustomResource', 'QuicksightDatasourceCustomResourceProvider', undefined);
  addCfnNagForCfnResource(stack, 'QuicksightCustomResourceLambda', 'QuicksightCustomResourceLambda' );
  addCfnNagToStack(stack, [
    {
      paths_endswith: ['QuicksightCustomResourceLambdaRole/DefaultPolicy/Resource'],
      rules_to_suppress: [
        {
          id: 'W76',
          reason: 'ACK: SPCM for IAM policy document is higher than 25',
        },
        {
          id: 'W12',
          reason: 'Policy is generated by CDK, * resource for read only access',
        },
      ],
    },
  ]);

}

